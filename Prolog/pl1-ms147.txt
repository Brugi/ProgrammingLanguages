% Jamie's coursework template

% Mark Schmieg, ms147, H00238262(why not)  <--- so we know who you are 
% F28PL Coursework PR1                         <--- sanity check


% You may assume variables, procedures, and functions defined in earlier questions 
% in your answers to later questions, though you should add comments in code explaining 
% this if any clarification might help read your code.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 1   <--- Yes, so we know what question you think you're answering 
%
% The complex numbers are explained here (and elsewhere):
%  http://www.mathsisfun.com/algebra/complex-number-multiply.html
% Represent a complex integer as a two-element list of integers, so [4,5] represents 4+5i.
% Write Prolog predicates
%  cadd/3
%  cmult/3
% representing complex integer addition and multiplication. Thus for instance,
%  cadd([X1,X2],[Y1,Y2],[Z1,Z2])
% succeeds if and only if Z1=X1+Y1 and Z2=X2+Y2.
% Note that complex number multiplication is not just like complex number addition. 
% Check the link and read the definition.
%
%   <--- always have the question under your nose 

/*
cadd returns an instantiation of Z1 to X1+Y1 and of Z2 to X2+Y2.
*/

cadd([X1,X2],[Y1,Y2], [Z1,Z2]) :- Z1 is X1+Y1, Z2 is X2+Y2.



/* Include testing in comments, so your marker can load this file as a database then cut-and-paste any testing into the command line.

%Test1 cadd([4,2],[3,7],[Z1,Z2]), should return: Z1 = 7 , Z2 = 9
cadd([4,2],[3,7],[Z1,Z2]).

%Test2 cadd([3,0],[3,4],[Z1,Z2]), should return: Z1 = 6,Z2 = 4.
cadd([3,0],[3,4],[Z1,Z2]).

%Test3 cadd([0,1],[2,0],[Z1,Z2]), should return: Z1 = 2, Z2 = 1
cadd([0,1],[2,0],[Z1,Z2]).
*/

/*
The function cmult takes two complex numbers and a variable wich will be the instantiation of the result. Since i²=-1, the product of the two imaginary parts will turn into 
integers(for example: 5i * 2i = -10). The rest of the operation goes like a normal multiplication.
*/

cmult([X1,X2],[Y1,Y2], [Z1,Z2]):- Z1 is  X1*Y1-X2*Y2, Z2 is X1*Y2+X2*Y1.

/*
%Test1 cmult([3,2],[1,7],[Z1,Z2]), should return: Z1 = -11, Z2 = 23
cmult([3,2],[1,7],[Z1,Z2]).

%Test2 cmult([4,5],[3,6],[Z1,Z2]), should return: Z1 = -18, Z2 = 39
cmult([4,5],[3,6],[Z1,Z2]).

%Test3 cmult([4,9],[7,1],[Z1,Z2]), should return: Z1 = 19, Z2 = 67
cmult([4,9],[7,1],[Z1,Z2]).

*/

% END ANSWER TO Question 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 2
%
% An integer sequence is a list of integers. Write a Prolog predicate
%  seqadd/3
% such that seqadd(X,Y,Z) succeeds when X and Y are lists of integers of the same length and
% Z is their sequence sum. 
/*
This goes through the list recursively and adds the top elements of each list together and at the end, it will return an instantiation of [ZH|ZT] to the pointwise addition of the two inputed lists.
*/

seqadd([],[],[]).
seqadd([XH|XT],[YH|YT],[ZH|ZT]):- seqadd(XT,YT, ZT),ZH is XH+YH.


/* Include testing in comments, so your marker can load this file as a database then cut-and-paste any testing into the command line.

%Test1 seqadd([1,2,3],[4,5,8], Z), should return: Z = [5,7,11]
seqadd([1,2,3],[4,5,8],Z).

%Test2 seqadd([4,63], [3,2],Z), should return: Z = [7, 65]
seqadd([4,63], [3,2],Z).

%Test3 seqadd([],[], Z), should return: Z = [].
seqadd([],[],Z).
*/

% END ANSWER TO Question 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 4
%
% 4a. Explain what backtracking has to do with Prolog. You might find this webpage helpful:
% https://www.doc.gold.ac.uk/~mas02gw/prolog_tutorial/prologpages/search.html
%
% 4b. Explain to what extent Prolog can be viewed as a logic programming language, and to what
% extent it cannot be so viewed. Include example code fragments as appropriate.

/* Write answer in comments here.
4)a) 
Backtracking in prolog is the fact of finding all possibilies of a called function.
For example: 
eat(mango).
eat(kiwi).
eat(apple).			
whateat(X):- eat(X).
If we run whateat(X), it will first return an instantiation of X to mango, following that result if we press N we will get kiwi and after that we would get apple, but if N is pressed again
prolog will return false, because there are no more possibilities for the function whateat(x) to return, with the database given. Every time that N is pressed prolog goes back to the top of the database 
and checks which of the items has been shown to the user and returns an instantiation of X to the fruit which was not displayed yet until it can't find any fruits any more.

4)b)
Prolog is logical programming language, because it uses the logical AND in the form of a comma. 
cadd([X1,X2],[Y1,Y2], [Z1,Z2]) :- Z1 is X1+Y1, Z2 is X2+Y2.  In cadd the comma is like a logical AND.
The prolog predicates also have a logic syntax, we can can look at them and say the left side is only true if and only if the right side is true.
whateat(X):- eat(X) this only works if eat(X) is possible, so once eat(X) has no more values, whateat doesn't function either.
It is also a considered a logic programming language because it uses a database, logic programs call data from a database.
eat(mango).
eat(kiwi).
eat(apple).			
whateat(X):- eat(X). This is a database, which contains the values mango,kiwi, apple, and a predicate. When we use whateat(X) we are communicating with the database which is a typical procedure of logic programming.

Prolog can also be seen as not being a logic language, because the predicates can only check or get output from an input but cannot do both operations at the same time. So a prolog predicate can get data from the 
database or check if the output. Furthermore Prolog is not a programming language because, the user needs to write everything themselves, i.e. database, queries). It was orginally made to be a purely logic language that
would be used in robots, but slowly drifted to becoming an imperitive language, i.e. instead of executing programs line by line, it goes around the database to check if the predicate used will function or not.
"cut" is also a reason for prolog not to be a logic language because "cut" makes a predicate always succeed, which shouldn't be allowed in a logical language. Plus "cut" also takes a way the possibility to backtrack when a result
is given, that is a fundamental part of a logic language, because one needs to be able to go through all possible variables of a given predicate if one wants to. 
*/

% END ANSWER TO Question 4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 5
%
% Write a database for a predicate cycleoflife/1 such that the query
%  cycleoflife(X)
% returns the instantiations
%  X = eat
%  X = sleep
%  X = code
%  X = eat
%  X = sleep
%  X = code
%  ...
% in an endless cycle.
% (This question has a beautiful and simple answer. If you find yourself writing lines and lines of
% complex code, there’s probably something amiss.)


/*
This is just simple recursion. To go through all the predicates and because it calls itself it loops forever if you press N every time.

*/
cycleoflife(eat).
cycleoflife(sleep).
cycleoflife(code).
cycleoflife(X):- cycleoflife(X).


/* Include testing in comments, so your marker can load this file as a database then cut-and-paste any testing into the command line.

%Test Calling cycleoflife(X) should return Z = eat, if you press N for ever it will cycle for ever through eat, sleep, code.

cycleoflife(X).


*/

% END ANSWER TO Question 5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


